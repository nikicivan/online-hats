{"ast":null,"code":"import { PRODUCT_LIST_REQUEST, PRODUCT_LIST_SUCCESS, PRODUCT_LIST_FAIL, PRODUCT_DETAILS_REQUEST, PRODUCT_DETAILS_SUCCESS, PRODUCT_DETAILS_FAIL } from './products.types';\nimport axios from 'axios';\n\nconst listProducts = () => async dispatch => {\n  try {\n    dispatch({\n      type: PRODUCT_LIST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(\"/api/products\");\n    dispatch({\n      type: PRODUCT_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_LIST_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst saveProduct = product => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: PRODUCT_SAVE_REQUEST,\n      payload: product\n    });\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState;\n    const {\n      data\n    } = await axios.post('/api/products', product, {\n      headers: {\n        'Authorization': 'Bearer' + userInfo.token\n      }\n    });\n    dispatch({\n      type: PRODUCT_SAVE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_SAVE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst detailsProduct = productId => async dispatch => {\n  try {\n    dispatch({\n      type: PRODUCT_DETAILS_REQUEST,\n      payload: productId\n    });\n    const {\n      data\n    } = await axios.get(\"/api/products/\" + productId);\n    dispatch({\n      type: PRODUCT_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: PRODUCT_DETAILS_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nexport { listProducts, detailsProduct, saveProduct };","map":{"version":3,"sources":["E:/04-PROJEKTI/online-hats/frontend/src/redux/product/products.actions.js"],"names":["PRODUCT_LIST_REQUEST","PRODUCT_LIST_SUCCESS","PRODUCT_LIST_FAIL","PRODUCT_DETAILS_REQUEST","PRODUCT_DETAILS_SUCCESS","PRODUCT_DETAILS_FAIL","axios","listProducts","dispatch","type","data","get","payload","error","message","saveProduct","product","getState","PRODUCT_SAVE_REQUEST","userSignin","userInfo","post","headers","token","PRODUCT_SAVE_SUCCESS","PRODUCT_SAVE_FAIL","detailsProduct","productId"],"mappings":"AAAA,SACCA,oBADD,EAECC,oBAFD,EAGCC,iBAHD,EAICC,uBAJD,EAKCC,uBALD,EAMCC,oBAND,QAOO,kBAPP;AAQA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,YAAY,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAC9C,MAAI;AACHA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAET;AAAR,KAAD,CAAR;AACA,UAAM;AAAEU,MAAAA;AAAF,QAAW,MAAMJ,KAAK,CAACK,GAAN,CAAU,eAAV,CAAvB;AACAH,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAER,oBAAR;AAA8BW,MAAAA,OAAO,EAAEF;AAAvC,KAAD,CAAR;AACA,GAJD,CAIE,OAAOG,KAAP,EAAc;AACfL,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEP,iBAAR;AAA2BU,MAAAA,OAAO,EAAEC,KAAK,CAACC;AAA1C,KAAD,CAAR;AACA;AACD,CARD;;AAUA,MAAMC,WAAW,GAAIC,OAAD,IAAa,OAAOR,QAAP,EAAiBS,QAAjB,KAA8B;AAC9D,MAAI;AACHT,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAES,oBAAP;AAA6BN,MAAAA,OAAO,EAAEI;AAAtC,KAAD,CAAR;AACA,UAAM;AAAEG,MAAAA,UAAU,EAAE;AAACC,QAAAA;AAAD;AAAd,QAA6BH,QAAnC;AACA,UAAM;AAAEP,MAAAA;AAAF,QAAW,MAAMJ,KAAK,CAACe,IAAN,CAAW,eAAX,EAA4BL,OAA5B,EAAqC;AAACM,MAAAA,OAAO,EAAE;AACrE,yBAAiB,WAAWF,QAAQ,CAACG;AADgC;AAAV,KAArC,CAAvB;AAIAf,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAEe,oBAAP;AAA6BZ,MAAAA,OAAO,EAAEF;AAAtC,KAAD,CAAR;AACA,GARD,CAQE,OAAOG,KAAP,EAAc;AACfL,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAEgB,iBAAP;AAA0Bb,MAAAA,OAAO,EAAEC,KAAK,CAACC;AAAzC,KAAD,CAAR;AACA;AACD,CAZD;;AAcA,MAAMY,cAAc,GAAIC,SAAD,IAAe,MAAOnB,QAAP,IAAoB;AACzD,MAAI;AACHA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEN,uBAAR;AAAiCS,MAAAA,OAAO,EAAEe;AAA1C,KAAD,CAAR;AACA,UAAM;AAAEjB,MAAAA;AAAF,QAAW,MAAMJ,KAAK,CAACK,GAAN,CAAU,mBAAmBgB,SAA7B,CAAvB;AACAnB,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEL,uBAAR;AAAiCQ,MAAAA,OAAO,EAAEF;AAA1C,KAAD,CAAR;AACA,GAJD,CAIE,OAAOG,KAAP,EAAc;AACfL,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEJ,oBAAR;AAA8BO,MAAAA,OAAO,EAAEC,KAAK,CAACC;AAA7C,KAAD,CAAR;AACA;AACD,CARD;;AAUA,SAAQP,YAAR,EAAsBmB,cAAtB,EAAsCX,WAAtC","sourcesContent":["import { \r\n\tPRODUCT_LIST_REQUEST, \r\n\tPRODUCT_LIST_SUCCESS, \r\n\tPRODUCT_LIST_FAIL,\r\n\tPRODUCT_DETAILS_REQUEST,\r\n\tPRODUCT_DETAILS_SUCCESS,\r\n\tPRODUCT_DETAILS_FAIL \r\n} from './products.types';\r\nimport axios from 'axios';\r\n\r\nconst listProducts = () => async (dispatch) => {\r\n\ttry {\r\n\t\tdispatch({ type: PRODUCT_LIST_REQUEST });\r\n\t\tconst { data } = await axios.get(\"/api/products\");\r\n\t\tdispatch({ type: PRODUCT_LIST_SUCCESS, payload: data });\r\n\t} catch (error) {\r\n\t\tdispatch({ type: PRODUCT_LIST_FAIL, payload: error.message});\r\n\t}\r\n};\r\n\r\nconst saveProduct = (product) => async (dispatch, getState) => {\r\n\ttry {\r\n\t\tdispatch({type: PRODUCT_SAVE_REQUEST, payload: product});\r\n\t\tconst { userSignin: {userInfo} } = getState;\r\n\t\tconst { data } = await axios.post('/api/products', product, {headers: {\r\n\t\t\t'Authorization': 'Bearer' + userInfo.token\r\n\t\t\t}\r\n\t\t});\r\n\t\tdispatch({type: PRODUCT_SAVE_SUCCESS, payload: data});\r\n\t} catch (error) {\r\n\t\tdispatch({type: PRODUCT_SAVE_FAIL, payload: error.message});\r\n\t}\r\n}\r\n\r\nconst detailsProduct = (productId) => async (dispatch) => {\r\n\ttry {\r\n\t\tdispatch({ type: PRODUCT_DETAILS_REQUEST, payload: productId });\r\n\t\tconst { data } = await axios.get(\"/api/products/\" + productId);\r\n\t\tdispatch({ type: PRODUCT_DETAILS_SUCCESS, payload: data });\r\n\t} catch (error) {\r\n\t\tdispatch({ type: PRODUCT_DETAILS_FAIL, payload: error.message});\r\n\t}\r\n} \r\n\r\nexport {listProducts, detailsProduct, saveProduct};"]},"metadata":{},"sourceType":"module"}