{"ast":null,"code":"import axios from 'axios';\nimport Cookie from 'js-cookie';\nimport { USER_SIGNIN_REQUEST, USER_SIGNIN_SUCCESS, USER_SIGNIN_FAIL } from './user.types';\n\nconst signin = (email, password) => async dispatch => {\n  dispatch({\n    type: USER_SIGNIN_REQUEST,\n    payload: {\n      email,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await axios.post(\"/api/users/signin\", {\n      email,\n      password\n    });\n    dispatch({\n      type: USER_SIGNIN_SUCCESS,\n      payload: data\n    });\n    Cookie.set('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_SIGNIN_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst register = (name, email, password) => async dispatch => {\n  dispatch({\n    type: USER_REGISTER_REQUEST,\n    payload: {\n      name,\n      email,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await axios.post(\"/api/users/register\", {\n      name,\n      email,\n      password\n    });\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    Cookie.set('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nexport { signin, register };","map":{"version":3,"sources":["E:/04-PROJEKTI/online-hats/frontend/src/redux/user/user.actions.js"],"names":["axios","Cookie","USER_SIGNIN_REQUEST","USER_SIGNIN_SUCCESS","USER_SIGNIN_FAIL","signin","email","password","dispatch","type","payload","data","post","set","JSON","stringify","error","message","register","name","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_REGISTER_FAIL"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SACCC,mBADD,EAECC,mBAFD,EAGCC,gBAHD,QAIO,cAJP;;AAMA,MAAMC,MAAM,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB,MAAOC,QAAP,IAAoB;AACvDA,EAAAA,QAAQ,CAAC;AAACC,IAAAA,IAAI,EAAEP,mBAAP;AAA4BQ,IAAAA,OAAO,EAAE;AAACJ,MAAAA,KAAD;AAAQC,MAAAA;AAAR;AAArC,GAAD,CAAR;;AACA,MAAI;AACH,UAAM;AAAEI,MAAAA;AAAF,QAAW,MAAMX,KAAK,CAACY,IAAN,CAAW,mBAAX,EAAgC;AAACN,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAAhC,CAAvB;AACAC,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAEN,mBAAP;AAA4BO,MAAAA,OAAO,EAAEC;AAArC,KAAD,CAAR;AACAV,IAAAA,MAAM,CAACY,GAAP,CAAW,UAAX,EAAuBC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAvB;AACA,GAJD,CAIE,OAAMK,KAAN,EAAa;AACdR,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAEL,gBAAP;AAAyBM,MAAAA,OAAO,EAAEM,KAAK,CAACC;AAAxC,KAAD,CAAR;AACA;AACD,CATD;;AAWA,MAAMC,QAAQ,GAAG,CAACC,IAAD,EAAOb,KAAP,EAAcC,QAAd,KAA2B,MAAOC,QAAP,IAAoB;AAC/DA,EAAAA,QAAQ,CAAC;AAACC,IAAAA,IAAI,EAAEW,qBAAP;AAA8BV,IAAAA,OAAO,EAAE;AAACS,MAAAA,IAAD;AAAOb,MAAAA,KAAP;AAAcC,MAAAA;AAAd;AAAvC,GAAD,CAAR;;AACA,MAAI;AACH,UAAM;AAAEI,MAAAA;AAAF,QAAW,MAAMX,KAAK,CAACY,IAAN,CAAW,qBAAX,EAAkC;AAACO,MAAAA,IAAD;AAAOb,MAAAA,KAAP;AAAcC,MAAAA;AAAd,KAAlC,CAAvB;AACAC,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAEY,qBAAP;AAA8BX,MAAAA,OAAO,EAAEC;AAAvC,KAAD,CAAR;AACAV,IAAAA,MAAM,CAACY,GAAP,CAAW,UAAX,EAAuBC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAvB;AACA,GAJD,CAIE,OAAMK,KAAN,EAAa;AACdR,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAEa,kBAAP;AAA2BZ,MAAAA,OAAO,EAAEM,KAAK,CAACC;AAA1C,KAAD,CAAR;AACA;AACD,CATD;;AAWA,SAASZ,MAAT,EAAiBa,QAAjB","sourcesContent":["import axios from 'axios';\r\nimport Cookie from 'js-cookie';\r\nimport { \r\n\tUSER_SIGNIN_REQUEST, \r\n\tUSER_SIGNIN_SUCCESS, \r\n\tUSER_SIGNIN_FAIL \r\n} from './user.types';\r\n\r\nconst signin = (email, password) => async (dispatch) => {\r\n\tdispatch({type: USER_SIGNIN_REQUEST, payload: {email, password}});\r\n\ttry {\r\n\t\tconst { data } = await axios.post(\"/api/users/signin\", {email, password});\r\n\t\tdispatch({type: USER_SIGNIN_SUCCESS, payload: data});\r\n\t\tCookie.set('userInfo', JSON.stringify(data));\r\n\t} catch(error) {\r\n\t\tdispatch({type: USER_SIGNIN_FAIL, payload: error.message});\r\n\t}\r\n};\r\n\r\nconst register = (name, email, password) => async (dispatch) => {\r\n\tdispatch({type: USER_REGISTER_REQUEST, payload: {name, email, password}});\r\n\ttry {\r\n\t\tconst { data } = await axios.post(\"/api/users/register\", {name, email, password});\r\n\t\tdispatch({type: USER_REGISTER_SUCCESS, payload: data});\r\n\t\tCookie.set('userInfo', JSON.stringify(data));\r\n\t} catch(error) {\r\n\t\tdispatch({type: USER_REGISTER_FAIL, payload: error.message});\r\n\t}\r\n};\r\n\r\nexport { signin, register };"]},"metadata":{},"sourceType":"module"}